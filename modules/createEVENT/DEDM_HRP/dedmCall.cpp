/********* Sample code generated by the curl command line tool **********
 * All curl_easy_setopt() options are documented at:
 * https://curl.haxx.se/libcurl/c/curl_easy_setopt.html
 ************************************************************************/
#include <curl/curl.h>
#include <iostream>
#include <string.h>
#include <sstream>
#include <stdlib.h>
static 
size_t write_data(void *ptr, size_t size, size_t nmemb, void *stream)
{
  size_t written = fwrite(ptr, size, nmemb, (FILE *)stream);
  return written;
}


/*
 * function to call vorted winds DEDM_HRP site and obtain wind forces
 * needs to make 2 calls: 1'st call to get site to create forces file
 *                        2'nd call to get this file
 */

int 
callDEDM_HRP(double shpValue,   // Cross-sectional shape (model):  1.00, 0.50, 0.33
	     double hValue,     // Model height (1,2,3,4,5): 0.1,0.2,0.3,0.4,0.5
	     int expCond,       // Exposure condition: 4,6
	     double timeValue,  // Averaging time Time_value 3600
	     double uH,         // Mean wind velocity at top (Ultimate limit state 700yr) m/s
	     double uHHab,      // Mean wind velocity at top (Habitability 10 yr) m/s
	     double B, double D, double H, // building width, depth, and height in METRE
	     int nFloor,        // number of floors
	     const char *outputFilename)        
{   

  std::cerr << shpValue << " " <<  hValue << " " << expCond << " " << timeValue << " " << uH << " " << uHHab << " " << B << " " << D << " " << H << " " << nFloor << "\n";


  // other parameters sent in call that will not effect forces returned
  double b_Den = 200.;  // building density
  double a_X = 0.; double a_Y = 0.; // mass eccentricity ex and ey
  double dispX =0.; double dispY =0.; // displacemenent dX and dY
  double interDriftX =0.; double interDriftY =0.;// interstory drift X and Y
  double accX =0.; double accY =0.; // acceleration dX and dY
  double gaussValue = 1; // peak factor
  char modeShape[] = "power"; // mode shape option
  double betaX =1; double betaY=1; double betaT =1; 
  double fx =.2; double fy=.2; double ft=0.35;
  double dampX = 0.01; double dampY = 0.01; double dampT = 0.01;

  // check expCondition
  if (expCond != 4 && expCond != 6) {
    expCond = 4;
    std::cerr << "callDEDM_HRP: ERROR expCondition must be 4 or 6, changing to 4\n";
  }

  // make first curl call

  curl_global_init(CURL_GLOBAL_ALL);

  CURLcode ret;
  CURL *hnd;
  struct curl_slist *slist1;

  slist1 = NULL;

  hnd = curl_easy_init();
  curl_easy_setopt(hnd, CURLOPT_URL, "http://evovw.ce.nd.edu/DEDM_HRP/DEDM_HRP_v3_4evo_SimCenter1.php");
  // DK original  curl_easy_setopt(hnd, CURLOPT_URL, "http://evovw.ce.nd.edu/DEDM_HRP/DEDM_HRP_v3_4evo.php");
  curl_easy_setopt(hnd, CURLOPT_NOPROGRESS, 1L);

  //
  // postStream is where we place all the input variables
  //

  std::ostringstream postStream; 
  char shpValueString[10]; shpValueString[0]='\0';
  sprintf(shpValueString,"%.2f", shpValue);
  postStream << "Shp_value=";
  postStream << shpValueString;
  postStream << "&H_value=" << hValue <<"&Blayer_value=" << 
    expCond << "&Time_value=" << timeValue << "&U_H=" << uH << "&U_Hser=40&U_Hhab=" << 
    uHHab << "&B=" << B << "&D=" << D << "&H=" << H << "&Nfloors=" << nFloor << 
    "&b_den=200&a_x=0&a_y=0&Disp_pos_x=0&Disp_pos_y=0&InDr_pos_x=0&InDr_pos_y=0" <<
    "&Acc_pos_x=0&Acc_pos_y=0&Gaus_value=1&modeshape_value=power&beta_x=1&beta_y=1" <<
    "&beta_t=1&fx=0.2&fy=0.2&ft=0.35&dampx=0.01&dampy=0.01&dampt=0.01";

  std::string postString = postStream.str();
  const char *postFields = postString.c_str();

  std::cerr << postFields << "\n";

  curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, postFields);

  /*
  curl_easy_setopt(hnd, CURLOPT_POSTFIELDSIZE_LARGE, (curl_off_t)326);
  curl_easy_setopt(hnd, CURLOPT_USERAGENT, "curl/7.54.0");
  curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, slist1);
  curl_easy_setopt(hnd, CURLOPT_MAXREDIRS, 50L);
  curl_easy_setopt(hnd, CURLOPT_HTTP_VERSION, (long)CURL_HTTP_VERSION_2TLS);
  curl_easy_setopt(hnd, CURLOPT_COOKIEJAR, "compressed");
  curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
  curl_easy_setopt(hnd, CURLOPT_TCP_KEEPALIVE, 1L);
  */

  //
  // store the output data in a file
  //

  FILE *pagefile = fopen(outputFilename, "wb");
  if(pagefile) {
    curl_easy_setopt(hnd, CURLOPT_WRITEFUNCTION, write_data);
    curl_easy_setopt(hnd, CURLOPT_WRITEDATA, pagefile);
  }

  // make first http call

  std::cerr << "DEDM_HRP - MAKING FIRST CALL\n";

  ret = curl_easy_perform(hnd);
  fclose(pagefile);

  //
  // check for success
  //

  if (ret != CURLE_OK) {
    const char *str = curl_easy_strerror(ret);
    std::cerr <<  "DEDM_HRP: curl FAILED with error string:" << str << "\n";
    return -1;
  } else {
    std::cerr << "DEDM_HRP - Performed call now checking\n";
  }

  //
  // open output, check for success, if success a certain string will exist
  // we parse that for the name of the file to request
  //

  pagefile = fopen(outputFilename, "r");
  char c[1000]; c[0]='\0';

  fscanf(pagefile,"%[^\n]", c);
  fclose(pagefile);

  std::cerr << "CURL RETURNED: " << c << "\n";

  /* ********************************************************************************
  * DK modified return .. following code not needed, keep around in case he changes
  char d[100];  d[0]='\0';
  char *p1=strchr(c,'h');
  char *p2=NULL, *p3 = NULL;
  if (p1 != NULL) {
    p2=strchr(p1,'?');
    if (p2 != NULL)
      p3=strchr(p2,'\'');
  }
  if (p1 == NULL || p2 == NULL || p3 == NULL) {
    std::cerr << "DEDM_HRP ERROR in what was returned from first call: " << c;
    return -2;
  }

  p2 += 1;
  strncpy(d, p2, p3-p2);
  p2 = &d[p3-p2+1];
  strcpy(p2, "\0");
  * DK modified return .. ********************************************************  */

  // reset the handle so methods can fill in the different options before next call
  curl_easy_reset(hnd);

  //
  // formulate address of second call
  //

  char loc[1024];
  loc[0]='\0';
  strcat(loc,"http://evovw.ce.nd.edu/DEDM_HRP/DEDMHRP_");
  //DK original  strcat(loc,&d[4]);
  strcat(loc,&c[4]);
  strcat(loc,"_fullscale_forces.mat");

  std::cerr << "DEDM_HRP - obtained link: " << loc << "\n";
  

  curl_easy_setopt(hnd, CURLOPT_URL, loc);
  curl_easy_setopt(hnd, CURLOPT_VERBOSE, 1L);
  curl_easy_setopt(hnd, CURLOPT_NOPROGRESS, 1L);

  // curl_easy_setopt(hnd, CURLOPT_USERAGENT, "curl/7.54.0");
  // curl_easy_setopt(hnd, CURLOPT_MAXREDIRS, 50L);
  // curl_easy_setopt(hnd, CURLOPT_HTTP_VERSION, (long)CURL_HTTP_VERSION_2TLS);
  // curl_easy_setopt(hnd, CURLOPT_TCP_KEEPALIVE, 1L);

  // send data to outputFilename file
  pagefile = fopen(outputFilename, "wb");
  if(pagefile) {
    curl_easy_setopt(hnd, CURLOPT_WRITEFUNCTION, write_data);
    curl_easy_setopt(hnd, CURLOPT_WRITEDATA, pagefile);
    // perform call
    ret = curl_easy_perform(hnd);
    // close file
    fclose(pagefile);
  }

  //
  // check for success
  //

  if (ret != CURLE_OK) {
    const char *str = curl_easy_strerror(ret);
    std::cerr <<  "DEDM_HRP: second curl request FAILED with error string:" << str << "\n";
    return -1;
  }

  curl_easy_cleanup(hnd);
  hnd = NULL;
  curl_slist_free_all(slist1);
  slist1 = NULL;

  return (int)ret;
}
		 

/* 1 0.2 6 3600 100 75 2.54 2.54 5.08 1 */
/* test it
int main(int argc, char *argv[])
{
  return callDEDM_HRP(1.0, 0.2, 4, 3600, 53, 34, 40, 40, 200, 2, "testOfDEDM_HRP.mat");
}
*/

